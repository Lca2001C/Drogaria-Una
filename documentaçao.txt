import java.sql.*; // Importa classes para manipulação de banco de dados.
import java.util.*; // Importa classes de utilitários, como Scanner e List.

public class Drogaria {
    private static Scanner scanner = new Scanner(System.in); // Scanner para leitura de entradas do usuário.
    private static Conexao conexao = new Conexao(); // Instância da classe Conexao para gerenciar a conexão com o banco de dados.

    public static void main(String[] args) throws SQLException {
        while (true) {
            System.out.println("Menu:");
            System.out.println("1. Criar funcionário");
            System.out.println("2. Acessar como funcionário");
            System.out.println("3. Sair");
            int opcao = scanner.nextInt();
            scanner.nextLine();

            switch (opcao) {
                case 1:
                    criarFuncionario();
                    break;
                case 2:
                    acessarComoFuncionario();
                    break;
                case 3:
                    System.out.println("Saindo...");
                    return; // Encerra o programa.
                default:
                    System.out.println("Opção inválida.");
            }
        }
    }

    private static void criarFuncionario() throws SQLException {
        System.out.println("Digite o nome do funcionário:");
        String nome = scanner.nextLine();
        System.out.println("Digite o tipo do funcionário (1 para Vendedor, 2 para Administrador):");
        int tipo = scanner.nextInt();
        scanner.nextLine();

        Conexao exec = new Conexao();
        // Cria a tabela de funcionários se ainda não existir.
        String sql = "CREATE TABLE IF NOT EXISTS funcionarios( " +
                        "id INT NOT NULL AUTO_INCREMENT, " +
                        "nome VARCHAR(50) NOT NULL, " +
                        "tipo INT NOT NULL, " +
                        "PRIMARY KEY (id))";
        exec.openDatabase();
        exec.executarQuery(sql);

        // Insere um novo funcionário.
        sql = "INSERT INTO funcionarios (nome, tipo) VALUES ('" + nome + "', " + tipo + ")";   
        exec.executarQuery(sql);
        exec.closeDatabase();
        
        System.out.println("FUNCIONARIO: " + nome + "\nTipo: " + tipo);
    }

    private static void acessarComoFuncionario() throws SQLException {
        System.out.print("ID do funcionário: ");
        int id = scanner.nextInt();
        scanner.nextLine();
        int tipoFuncionario = buscarFuncionarioPorId(id);

        if (tipoFuncionario == 0) {
            System.out.println("Funcionário não encontrado.");
            return;
        }

        if (tipoFuncionario == 1) {
            menuVendedor(null); // Chama o menu do vendedor.
        } else if (tipoFuncionario == 2) {
            menuAdministrador(null); // Chama o menu do administrador.
        } else {
            System.out.println("Tipo de funcionário desconhecido.");
        }
    }

    public static int buscarFuncionarioPorId(int id) throws SQLException {
        Conexao exec = new Conexao();
        String sql = "SELECT id, tipo FROM funcionarios WHERE id = ?";
        Connection connection = null;
        int tipo = 0;

        try {
            connection = exec.openDatabase();
            if (connection != null) {
                try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                    preparedStatement.setInt(1, id);
                    ResultSet resultSet = preparedStatement.executeQuery();
    
                    if (resultSet.next()) {
                        tipo = resultSet.getInt("tipo");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                exec.closeDatabase();
            }
        }
        return tipo;
    }

    private static void menuAdministrador(Administrador administrador) throws SQLException {
        while (true) {
            System.out.println("Menu Administrador:");
            System.out.println("1. Adicionar produto");
            System.out.println("2. Remover produto");
            System.out.println("3. Listar produtos");
            System.out.println("4. Listar um produto");
            System.out.println("5. Alterar estoque");
            System.out.println("6. Voltar ao menu principal");
            int opcao = scanner.nextInt();
            scanner.nextLine();

            switch (opcao) {
                case 1:
                    adicionarProduto();
                    break;
                case 2:
                    removerProduto();
                    break;
                case 3:
                    List<Produto> produtos = listarProdutos();
                    if (produtos.isEmpty()) {
                        System.out.println("Nenhum dado encontrado.");
                    } else {
                        System.out.println("Dados encontrados:");
                        for (Produto produto : produtos) {
                            System.out.println(produto);
                        }
                    }
                    break;
                case 4:
                    List<Produto> umProduto = listarUmProduto();
                    if (umProduto.isEmpty()) {
                        System.out.println("Nenhum dado encontrado.");
                    } else {
                        System.out.println("Dados encontrados:");
                        for (Produto produto : umProduto) {
                            System.out.println(produto);
                        }
                    }
                    break;
                case 5:
                    alterarEstoque();
                    break;
                case 6:
                    return; // Retorna ao menu principal.
                default:
                    System.out.println("Opção inválida.");
            }
        }
    }

    private static void adicionarProduto() throws SQLException {
        System.out.println("Digite o nome do produto");
        String nome = scanner.nextLine();
        System.out.println("Digite o valor do produto");
        double valor = scanner.nextDouble();
        System.out.println("Digite a quantidade inicial do produto");
        int quantidade = scanner.nextInt();
        scanner.nextLine();
        
        String tarja = null;
        while (true) {
            System.out.println("Selecione a tarja");
            System.out.println("1. Sem tarja");
            System.out.println("2. Tarja Amarela");
            System.out.println("3. Tarja Vermelha");
            System.out.println("4. Tarja Preta");
            int tarjaSwitch = scanner.nextInt();
            switch (tarjaSwitch) {
                case 1:
                    tarja = "Sem tarja";
                    break;
                case 2:
                    tarja = "Amarela";
                    break;
                case 3:
                    tarja = "Vermelha";
                    break;
                case 4:
                    tarja = "Preta";
                    break;
                default:
                    System.out.println("Seleção inválida, tente novamente.");
                    continue;
            }
            break;
        }

        Conexao exec = new Conexao();
        // Cria a tabela de produtos se ainda não existir.
        String sql = "CREATE TABLE IF NOT EXISTS produtos( " +
                        "id INT NOT NULL AUTO_INCREMENT, " +
                        "nome VARCHAR(50) NOT NULL, " +
                        "valor DECIMAL(5,2) NOT NULL, " +
                        "quantidade INT, " +
                        "tarja VARCHAR(15) NOT NULL, " +
                        "PRIMARY KEY (id))";
        exec.openDatabase();
        exec.executarQuery(sql);

        // Insere um novo produto.
        sql = "INSERT INTO produtos (nome, valor, quantidade, tarja) " +
              "VALUES ('" + nome + "', " + valor + ", " + quantidade + ", '" + tarja + "')";
        exec.executarQuery(sql);
        exec.closeDatabase();
    }

    private static void removerProduto() throws SQLException {
        System.out.print("ID do produto a ser removido: ");
        int id = scanner.nextInt();
        Conexao exec = new Conexao();
        String sql = "DELETE FROM produtos WHERE id = " + id;
        exec.openDatabase();
        exec.executarQuery(sql);
        exec.closeDatabase();    
    }

    private static void menuVendedor(Vendedor vendedor) {
        while (true) {
            System.out.println("Menu Vendedor:");
            System.out.println("1. Realizar venda");
            System.out.println("2. Listar produtos");
            System.out.println("3. Listar um produto");
            System.out.println("4. Voltar ao menu principal");
            int opcao = scanner.nextInt();
            scanner.nextLine();

            switch (opcao) {
                case 1:
                    realizarVenda();
                    break;
                case 2:
                    List<Produto> produtos = listarProdutos();
                    if (produtos.isEmpty()) {
                        System.out.println("Nenhum dado encontrado.");
                    } else {
                        System.out.println("Dados encontrados:");
                        for (Produto produto : produtos) {
                            System.out.println(produto);
                        }
                    }
                    break;
                case 3:
                    List<Produto> umProduto = listarUmProduto();
                    if (umProduto.isEmpty()) {
                        System.out.println("Nenhum dado encontrado.");
                    } else {
                        System.out.println("Dados encontrados:");
                        for (Produto produto : umProduto) {
                            System.out.println(produto);
                        }
                    }
                    break;
                case 4:
                    return; // Retorna ao menu principal.
                default:
                    System.out.println("Opção inválida.");
            }
        }
    }

    private static int realizarVenda() {
        System.out.print("ID do produto: ");
        int id = scanner.nextInt();
        System.out.print("Quantidade: ");
        int quantidade = scanner.nextInt();
        scanner.nextLine();

        Conexao exec = new Conexao();
        String sql = "SELECT id, quantidade, tarja FROM produtos WHERE id = ?";
        String updateSql = "UPDATE produtos SET quantidade = ? WHERE id = ?";
        Connection connection = null;
        int quantidadedb = 0;

        try {
            connection = exec.openDatabase();
            if (connection != null) {
                try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                    preparedStatement.setInt(1, id);
                    ResultSet resultSet = preparedStatement.executeQuery();
                    if (resultSet.next()) {
                        quantidadedb = resultSet.getInt("quantidade");
                        String tarja = resultSet.getString("tarja");
                        if (tarja.equals("Preta") || tarja.equals("Vermelha")) {
                            System.out.println("Venda não autorizada para produtos de tarja " + tarja);
                            return -1; // Retorna -1 para indicar que a venda não foi autorizada.
                        }
                    } else {
                        System.out.println("Produto não encontrado.");
                        return 0;
                    }
                }

                if (quantidadedb >= quantidade) {
                    try (PreparedStatement preparedStatement = connection.prepareStatement(updateSql)) {
                        preparedStatement.setInt(1, quantidadedb - quantidade);
                        preparedStatement.setInt(2, id);
                        preparedStatement.executeUpdate();
                        System.out.println("Venda realizada com sucesso.");
                    }
                } else {
                    System.out.println("Quantidade insuficiente em estoque.");
                    return 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                exec.closeDatabase();
            }
        }
        return 1; // Retorna 1 para indicar que a venda foi realizada com sucesso.
    }

    private static List<Produto> listarProdutos() {
        Conexao exec = new Conexao();
        String sql = "SELECT * FROM produtos";
        Connection connection = null;
        List<Produto> produtos = new ArrayList<>();

        try {
            connection = exec.openDatabase();
            if (connection != null) {
                try (Statement statement = connection.createStatement()) {
                    ResultSet resultSet = statement.executeQuery(sql);
                    while (resultSet.next()) {
                        int id = resultSet.getInt("id");
                        String nome = resultSet.getString("nome");
                        double valor = resultSet.getDouble("valor");
                        int quantidade = resultSet.getInt("quantidade");
                        String tarja = resultSet.getString("tarja");

                        Produto produto = new Produto(id, nome, valor, quantidade, tarja);
                        produtos.add(produto);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                exec.closeDatabase();
            }
        }
        return produtos;
    }

    private static List<Produto> listarUmProduto() {
        System.out.println("Digite o ID do produto a ser buscado:");
        int id = scanner.nextInt();
        Conexao exec = new Conexao();
        String sql = "SELECT * FROM produtos WHERE id = ?";
        Connection connection = null;
        List<Produto> produtos = new ArrayList<>();

        try {
            connection = exec.openDatabase();
            if (connection != null) {
                try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                    preparedStatement.setInt(1, id);
                    ResultSet resultSet = preparedStatement.executeQuery();
                    while (resultSet.next()) {
                        String nome = resultSet.getString("nome");
                        double valor = resultSet.getDouble("valor");
                        int quantidade = resultSet.getInt("quantidade");
                        String tarja = resultSet.getString("tarja");

                        Produto produto = new Produto(id, nome, valor, quantidade, tarja);
                        produtos.add(produto);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                exec.closeDatabase();
            }
        }
        return produtos;
    }

    private static void alterarEstoque() {
        System.out.print("ID do produto: ");
        int id = scanner.nextInt();
        System.out.print("Nova quantidade: ");
        int quantidade = scanner.nextInt();
        scanner.nextLine();

        Conexao exec = new Conexao();
        String sql = "UPDATE produtos SET quantidade = ? WHERE id = ?";
        Connection connection = null;

        try {
            connection = exec.openDatabase();
            if (connection != null) {
                try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
                    preparedStatement.setInt(1, quantidade);
                    preparedStatement.setInt(2, id);
                    preparedStatement.executeUpdate();
                    System.out.println("Estoque alterado com sucesso.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                exec.closeDatabase();
            }
        }
    }
}
